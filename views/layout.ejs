<!DOCTYPE html>
<html>
  <head>
    <title><%- title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/linker/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/linker/styles/custom.css">
    <!--STYLES END-->
  </head>

  <body>

    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class='container'>
        <a href="/" class='navbar-brand'>My Twitter</a>
      
        <div class='pull-right col-md-8 margin-top'>
          <% if(req.session.authenticated != true) { %>
          <form action='/session/login' method='POST'>
            <div class="col-md-5">
              <input type='text' class='form-control' placeholder='Email address' name='email'>
            </div>
            <div class="col-md-5">
              <input type='password' class='form-control' placeholder='Password' name='password'>
            </div>
            <div class="col-md-2">
              <input type='submit' class='btn btn-sm btn-primary btn-block' value='Sign in'>
            </div>
            <input type="hidden" name="_csrf" value="<%= _csrf %>" />
          </form>
          <% } %>
          <% if(req.session.authenticated == true) { %>

          <div class='col-md-2 pull-right'>
            <a href="/session/destroy" class='btn btn-sm btn-danger btn-block'>Logout</a>
          </div>
          <!-- <form action='/user/search' method='GET'>
            <div class="col-md-1 pull-right">
              <input type='submit' class='btn btn-sm btn-primary btn-block' value='Go'>
            </div> -->
            <input id="searchUser" type="text" class='col-md-4 pull-right' 
              name='name' placeholder="Search">
            </input>
            <div id="usersSearchResult"></div>
          <!-- </form> -->

          <% } %>
        </div>
      </div>
    </div>

    <%- body %>

    <div class='container'>
      <hr>
      <footer>
        <h6>Created by Aditya Sethi & Pinakin Mistry</h6>
      </footer>
    </div>

    <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/linker/js/socket.io.js"></script>
    <script src="/linker/js/sails.io.js"></script>
    <script src="/linker/js/app.js"></script>
    <script src="/linker/js/jquery.min.js"></script>
    <script src="/linker/js/underscore.js"></script>
    <!--SCRIPTS END-->

    <!--INLINE SCRIPT -->
    <script>
      $(function(){
        $('#searchUser').on('change', function(){
          var searchUser = $(this).val();
          $.ajax({
            type: 'GET',
            url: '/user/search',
            data: {name: searchUser}
          }).done(function(data) {
            var users = data.users;
            console.log(data);
            $('#usersSearchResult').html('<b>'+users.name+'</b> @'+users.userid+'<br>'+users.email);
            $('#usersSearchResult').css('display', 'block');
          });
        });
      });
    </script>
  </body>
</html>
